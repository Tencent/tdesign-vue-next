/* eslint-disable @typescript-eslint/no-unused-vars */
/**
 * 该文件由脚本自动生成，如需修改请联系 PMC
 * This file generated by scripts of tdesign-api. `npm run api:docs Descriptions VueNext(PC) vitest,finalProject`
 * If you need to modify this file, contact PMC first please.
 */
import { mount } from '@vue/test-utils';
import { Descriptions, DescriptionItem } from '..';

describe('Descriptions Component', () => {
  it('props.bordered works fine', () => {
    // bordered default value is false
    const wrapper1 = mount(<Descriptions></Descriptions>);
    expect(wrapper1.classes('t-descriptions--bordered')).toBeFalsy();
    // bordered = true
    const wrapper2 = mount(<Descriptions bordered={true}></Descriptions>);
    expect(wrapper2.classes('t-descriptions--bordered')).toBeTruthy();
    // bordered = false
    const wrapper3 = mount(<Descriptions bordered={false}></Descriptions>);
    expect(wrapper3.classes('t-descriptions--bordered')).toBeFalsy();
  });

  const contentAlignClassNameList = ['t-descriptions__content--align-left', 't-descriptions__content--align-center'];
  ['left', 'center'].forEach((item, index) => {
    it(`props.contentAlign is equal to ${item}`, () => {
      const wrapper = mount(<Descriptions contentAlign={item}></Descriptions>);
      expect(wrapper.classes(contentAlignClassNameList[index])).toBeTruthy();
    });
  });

  const labelAlignClassNameList = [
    't-descriptions__label--align-left',
    't-descriptions__label--align-right',
    't-descriptions__label--align-top',
  ];
  ['left', 'right', 'top'].forEach((item, index) => {
    it(`props.labelAlign is equal to ${item}`, () => {
      const wrapper = mount(<Descriptions labelAlign={item}></Descriptions>);
      expect(wrapper.classes(labelAlignClassNameList[index])).toBeTruthy();
    });
  });

  const layoutClassNameList = ['t-descriptions--horizontal', 't-descriptions--vertical'];
  ['horizontal', 'vertical'].forEach((item, index) => {
    it(`props.layout is equal to ${item}`, () => {
      const wrapper = mount(<Descriptions layout={item}></Descriptions>);
      expect(wrapper.classes(layoutClassNameList[index])).toBeTruthy();
    });
  });

  const sizeClassNameList = ['t-size-s', { 't-size-m': false }, 't-size-l'];
  ['small', 'medium', 'large'].forEach((item, index) => {
    it(`props.size is equal to ${item}`, () => {
      const wrapper = mount(<Descriptions size={item}></Descriptions>).find('.t-descriptions');
      if (typeof sizeClassNameList[index] === 'string') {
        expect(wrapper.classes(sizeClassNameList[index])).toBeTruthy();
      } else if (typeof sizeClassNameList[index] === 'object') {
        const classNameKey = Object.keys(sizeClassNameList[index])[0];
        expect(wrapper.classes(classNameKey)).toBeFalsy();
      }
    });
  });
});

describe('DescriptionItem Component', () => {
  it('props.label works fine', () => {
    const wrapper = mount(<DescriptionItem label={() => <span class="custom-node">TNode</span>}></DescriptionItem>);
    expect(wrapper.find('.custom-node').exists()).toBeTruthy();
    expect(wrapper.element).toMatchSnapshot();
  });

  it('slots.label works fine', () => {
    const wrapper = mount(
      <DescriptionItem v-slots={{ label: () => <span class="custom-node">TNode</span> }}></DescriptionItem>,
    );
    expect(wrapper.find('.custom-node').exists()).toBeTruthy();
    expect(wrapper.element).toMatchSnapshot();
  });
});
