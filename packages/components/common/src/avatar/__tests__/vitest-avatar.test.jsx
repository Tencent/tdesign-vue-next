/* eslint-disable @typescript-eslint/no-unused-vars */
/**
 * 该文件由脚本自动生成，如需修改请联系 PMC
 * This file generated by scripts of tdesign-api. `npm run api:docs Avatar VueNext(PC) vitest,finalProject`
 * If you need to modify this file, contact PMC first please.
 */
import { mount } from '@vue/test-utils';
import { vi } from 'vitest';
import { Avatar, AvatarGroup } from '..';
import { getAvatarGroupDefaultMount } from './mount';
import { mockDelay, simulateImageEvent } from '@test/utils';

describe('Avatar Component', () => {
  it('props.alt works fine', () => {
    const wrapper = mount(<Avatar alt={'Avatar'} image={'https://tdesign.gtimg.com/site/avatar.jpg'}></Avatar>).find(
      'img',
    );
    expect(wrapper.attributes('alt')).toBe('Avatar');
  });

  it('props.content works fine', () => {
    const wrapper = mount(<Avatar content={() => <span class="custom-node">TNode</span>}></Avatar>);
    expect(wrapper.find('.custom-node').exists()).toBeTruthy();
    expect(wrapper.element).toMatchSnapshot();
  });

  it('slots.content works fine', () => {
    const wrapper = mount(<Avatar v-slots={{ content: () => <span class="custom-node">TNode</span> }}></Avatar>);
    expect(wrapper.find('.custom-node').exists()).toBeTruthy();
    expect(wrapper.element).toMatchSnapshot();
  });

  it('props.default works fine', () => {
    const wrapper = mount(<Avatar default={() => <span class="custom-node">TNode</span>}></Avatar>);
    expect(wrapper.find('.custom-node').exists()).toBeTruthy();
    expect(wrapper.element).toMatchSnapshot();
  });

  it('slots.default works fine', () => {
    const wrapper = mount(<Avatar v-slots={{ default: () => <span class="custom-node">TNode</span> }}></Avatar>);
    expect(wrapper.find('.custom-node').exists()).toBeTruthy();
    expect(wrapper.element).toMatchSnapshot();
  });

  it('props.hideOnLoadFailed works fine', async () => {
    const wrapper = mount(<Avatar image={'https://this.is.an.error.path.jpg'} hideOnLoadFailed={true}></Avatar>);
    const imgDom = wrapper.find('img').element;
    simulateImageEvent(imgDom, 'error');
    await mockDelay(300);
    expect(wrapper.find('.t-image').exists()).toBeFalsy();
  });

  it('props.icon works fine', () => {
    const wrapper = mount(<Avatar icon={() => <span class="custom-node">TNode</span>}></Avatar>);
    expect(wrapper.find('.custom-node').exists()).toBeTruthy();
    expect(wrapper.find('.t-avatar__icon').exists()).toBeTruthy();
  });

  it('slots.icon works fine', () => {
    const wrapper = mount(<Avatar v-slots={{ icon: () => <span class="custom-node">TNode</span> }}></Avatar>);
    expect(wrapper.find('.custom-node').exists()).toBeTruthy();
    expect(wrapper.find('.t-avatar__icon').exists()).toBeTruthy();
  });

  it(`props.image is equal to https://tdesign.tencent.com/`, () => {
    const wrapper = mount(<Avatar image={'https://tdesign.tencent.com/'}></Avatar>);
    const domWrapper = wrapper.find('img');
    expect(domWrapper.attributes('src')).toBe('https://tdesign.tencent.com/');
  });

  ['circle', 'round'].forEach((item) => {
    it(`props.shape is equal to ${item}`, () => {
      const wrapper = mount(<Avatar shape={item}></Avatar>);
      expect(wrapper.classes(`t-avatar--${item}`)).toBeTruthy();
      expect(wrapper.element).toMatchSnapshot();
    });
  });

  const sizeClassNameMap = { small: 't-size-s', medium: 't-size-m', large: 't-size-l' };
  Object.entries(sizeClassNameMap).forEach(([enumValue, expectedClassName]) => {
    it(`props.size is equal to ${enumValue}`, () => {
      let propValue = { true: true, false: false }[enumValue];
      propValue = propValue === undefined ? enumValue : propValue;
      const wrapper = mount(<Avatar size={propValue}></Avatar>);
      expect(wrapper.classes(expectedClassName)).toBeTruthy();
    });
  });

  it(`props.size is equal to 120px`, () => {
    const wrapper = mount(<Avatar size={'120px'}></Avatar>);
    const domWrapper = wrapper.findComponent(Avatar);
    expect(domWrapper.element.style.width).toBe('120px');
    expect(domWrapper.element.style.height).toBe('120px');
    expect(domWrapper.element.style.fontSize).toBe('60px');
  });

  it('events.error works fine', async () => {
    const onErrorFn = vi.fn();
    const wrapper = mount(<Avatar image={'https://this.is.an.error.path.jpg'} onError={onErrorFn}></Avatar>);
    const imgDom = wrapper.find('img').element;
    simulateImageEvent(imgDom, 'error');
    await mockDelay(300);
    expect(onErrorFn).toHaveBeenCalled();
    expect(onErrorFn.mock.calls[0][0].e.type).toBe('error');
  });
});

describe('AvatarGroup Component', () => {
  const cascadingClassNameList = ['t-avatar--offset-left', 't-avatar--offset-right'];
  ['left-up', 'right-up'].forEach((item, index) => {
    it(`props.cascading is equal to ${item}`, () => {
      const wrapper = mount(<AvatarGroup cascading={item}></AvatarGroup>);
      expect(wrapper.classes(cascadingClassNameList[index])).toBeTruthy();
      expect(wrapper.element).toMatchSnapshot();
    });
  });

  it('props.collapseAvatar works fine', () => {
    const wrapper = getAvatarGroupDefaultMount(AvatarGroup, {
      collapseAvatar: () => <span class="custom-node">TNode</span>,
      max: 3,
    });
    expect(wrapper.find('.custom-node').exists()).toBeTruthy();
    expect(wrapper.element).toMatchSnapshot();
  });

  it('slots.collapseAvatar works fine', () => {
    const wrapper = getAvatarGroupDefaultMount(AvatarGroup, {
      'v-slots': { collapseAvatar: () => <span class="custom-node">TNode</span> },
      max: 3,
    });
    expect(wrapper.find('.custom-node').exists()).toBeTruthy();
    expect(wrapper.element).toMatchSnapshot();
  });
  it('slots.collapse-avatar works fine', () => {
    const wrapper = getAvatarGroupDefaultMount(AvatarGroup, {
      'v-slots': { 'collapse-avatar': () => <span class="custom-node">TNode</span> },
      max: 3,
    });
    expect(wrapper.find('.custom-node').exists()).toBeTruthy();
    expect(wrapper.element).toMatchSnapshot();
  });

  it('props.max works fine. `{".t-avatar":4,".t-avatar__collapse":1,".t-avatar__collapse > span":{"text":"+2"}}` should exist', () => {
    const wrapper = getAvatarGroupDefaultMount(AvatarGroup, { max: 3 });
    expect(wrapper.findAll('.t-avatar').length).toBe(4);
    expect(wrapper.findAll('.t-avatar__collapse').length).toBe(1);
    expect(wrapper.find('.t-avatar__collapse > span').text()).toBe('+2');
  });

  it(`props.size is equal to small`, () => {
    const wrapper = getAvatarGroupDefaultMount(AvatarGroup, { size: 'small' });
    const domWrapper = wrapper.find('.t-avatar');
    expect(domWrapper.classes('t-size-s')).toBeTruthy();
    const domWrapper1 = wrapper.find('.t-avatar:nth-child(5)');
    expect(domWrapper1.classes('t-size-l')).toBeTruthy();
  });
  it(`props.size is equal to large`, () => {
    const wrapper = getAvatarGroupDefaultMount(AvatarGroup, { size: 'large' });
    const domWrapper = wrapper.find('.t-avatar');
    expect(domWrapper.classes('t-size-l')).toBeTruthy();
    const domWrapper1 = wrapper.find('.t-avatar:nth-child(4)');
    expect(domWrapper1.classes('t-size-s')).toBeTruthy();
  });

  it(`props.size is equal to 120px`, () => {
    const wrapper = getAvatarGroupDefaultMount(AvatarGroup, { size: '120px' });
    const domWrapper = wrapper.find('.t-avatar');
    expect(domWrapper.element.style.width).toBe('120px');
    expect(domWrapper.element.style.height).toBe('120px');
    expect(domWrapper.element.style.fontSize).toBe('60px');
  });
});
