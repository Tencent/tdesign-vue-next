/* eslint-disable @typescript-eslint/no-unused-vars */
/**
 * 该文件由脚本自动生成，如需修改请联系 PMC
 * This file generated by scripts of tdesign-api. `npm run api:docs Avatar Vue(PC) vitest,finalProject`
 * If you need to modify this file, contact PMC first please.
 */
import { mount } from '@vue/test-utils';
import { Avatar, AvatarGroup } from '..';
import { getAvatarGroupDefaultMount } from './mount';

describe('Avatar Component', () => {
  it('props.alt works fine', () => {
    const wrapper = mount({
      render() {
        return <Avatar alt="Avatar" image="https://tdesign.gtimg.com/site/avatar.jpg"></Avatar>;
      },
    }).find('img');
    expect(wrapper.attributes('alt')).toBe('Avatar');
  });

  it('props.content works fine', () => {
    const wrapper = mount({
      render() {
        return <Avatar content={(h) => <span class="custom-node">TNode</span>}></Avatar>;
      },
    });
    expect(wrapper.find('.custom-node').exists()).toBeTruthy();
    expect(wrapper.element).toMatchSnapshot();
  });

  it('slots.content works fine', () => {
    const wrapper = mount({
      render() {
        return <Avatar scopedSlots={{ content: (h) => <span class="custom-node">TNode</span> }}></Avatar>;
      },
    });
    expect(wrapper.find('.custom-node').exists()).toBeTruthy();
    expect(wrapper.element).toMatchSnapshot();
  });

  it('props.default works fine', () => {
    const wrapper = mount({
      render() {
        return <Avatar default={(h) => <span class="custom-node">TNode</span>}></Avatar>;
      },
    });
    expect(wrapper.find('.custom-node').exists()).toBeTruthy();
    expect(wrapper.element).toMatchSnapshot();
  });

  it('slots.default works fine', () => {
    const wrapper = mount({
      render() {
        return <Avatar scopedSlots={{ default: (h) => <span class="custom-node">TNode</span> }}></Avatar>;
      },
    });
    expect(wrapper.find('.custom-node').exists()).toBeTruthy();
    expect(wrapper.element).toMatchSnapshot();
  });

  it.skip('props.hideOnLoadFailed works fine', async () => {
    const wrapper = mount({
      render() {
        return <Avatar image="https://this.is.an.error.path.jpg" hideOnLoadFailed={true}></Avatar>;
      },
    });
    await wrapper.vm.$nextTick();
  });

  it('props.icon works fine', () => {
    const wrapper = mount({
      render() {
        return <Avatar icon={(h) => <span class="custom-node">TNode</span>}></Avatar>;
      },
    });
    expect(wrapper.find('.custom-node').exists()).toBeTruthy();
    expect(wrapper.find('.t-avatar__icon').exists()).toBeTruthy();
  });

  it('slots.icon works fine', () => {
    const wrapper = mount({
      render() {
        return <Avatar scopedSlots={{ icon: (h) => <span class="custom-node">TNode</span> }}></Avatar>;
      },
    });
    expect(wrapper.find('.custom-node').exists()).toBeTruthy();
    expect(wrapper.find('.t-avatar__icon').exists()).toBeTruthy();
  });

  it('props.image is equal to https://tdesign.tencent.com/', () => {
    const wrapper = mount({
      render() {
        return <Avatar image="https://tdesign.tencent.com/"></Avatar>;
      },
    });
    const domWrapper = wrapper.find('img');
    expect(domWrapper.attributes('src')).toBe('https://tdesign.tencent.com/');
  });

  ['circle', 'round'].forEach((item) => {
    it(`props.shape is equal to ${item}`, () => {
      const wrapper = mount({
        render() {
          return <Avatar shape={item}></Avatar>;
        },
      });
      expect(wrapper.classes(`t-avatar--${item}`)).toBeTruthy();
      expect(wrapper.element).toMatchSnapshot();
    });
  });

  const sizeClassNameMap = { small: 't-size-s', medium: 't-size-m', large: 't-size-l' };
  Object.entries(sizeClassNameMap).forEach(([enumValue, expectedClassName]) => {
    it(`props.size is equal to ${enumValue}`, () => {
      let propValue = { true: true, false: false }[enumValue];
      propValue = propValue === undefined ? enumValue : propValue;
      const wrapper = mount({
        render() {
          return <Avatar size={propValue}></Avatar>;
        },
      });
      expect(wrapper.classes(expectedClassName)).toBeTruthy();
    });
  });

  it('props.size is equal to 120px', () => {
    const wrapper = mount({
      render() {
        return <Avatar size="120px"></Avatar>;
      },
    });
    const domWrapper = wrapper.findComponent(Avatar);
    expect(domWrapper.element.style.width).toBe('120px');
    expect(domWrapper.element.style.height).toBe('120px');
    expect(domWrapper.element.style.fontSize).toBe('60px');
  });

  it.skip('events.error works fine', async () => {
    const onErrorFn = vi.fn();
    const wrapper = mount({
      render() {
        return <Avatar image="https://this.is.an.error.path.jpg" on={{ error: onErrorFn }}></Avatar>;
      },
    });
    await wrapper.vm.$nextTick();
    expect(onErrorFn).toHaveBeenCalled();
    expect(onErrorFn.mock.calls[0][0].e.type).toBe('error');
  });
});

describe('AvatarGroup Component', () => {
  const cascadingClassNameList = ['t-avatar--offset-left', 't-avatar--offset-right'];
  ['left-up', 'right-up'].forEach((item, index) => {
    it(`props.cascading is equal to ${item}`, () => {
      const wrapper = mount({
        render() {
          return <AvatarGroup cascading={item}></AvatarGroup>;
        },
      });
      expect(wrapper.classes(cascadingClassNameList[index])).toBeTruthy();
      expect(wrapper.element).toMatchSnapshot();
    });
  });

  it('props.collapseAvatar works fine', () => {
    const wrapper = getAvatarGroupDefaultMount(AvatarGroup, {
      collapseAvatar: (h) => <span class="custom-node">TNode</span>,
      max: 3,
    });
    expect(wrapper.find('.custom-node').exists()).toBeTruthy();
    expect(wrapper.element).toMatchSnapshot();
  });

  it('slots.collapseAvatar works fine', () => {
    const wrapper = getAvatarGroupDefaultMount(AvatarGroup, {
      scopedSlots: { collapseAvatar: (h) => <span class="custom-node">TNode</span> },
      max: 3,
    });
    expect(wrapper.find('.custom-node').exists()).toBeTruthy();
    expect(wrapper.element).toMatchSnapshot();
  });
  it('slots.collapse-avatar works fine', () => {
    const wrapper = getAvatarGroupDefaultMount(AvatarGroup, {
      scopedSlots: { 'collapse-avatar': () => <span class="custom-node">TNode</span> },
      max: 3,
    });
    expect(wrapper.find('.custom-node').exists()).toBeTruthy();
    expect(wrapper.element).toMatchSnapshot();
  });

  it('props.max works fine. `{".t-avatar":4}` should exist', () => {
    const wrapper = getAvatarGroupDefaultMount(AvatarGroup, { max: 3 });
    expect(wrapper.findAll('.t-avatar').length).toBe(4);
  });

  it('props.max works fine. `{".t-avatar__collapse":1}` should exist', () => {
    const wrapper = getAvatarGroupDefaultMount(AvatarGroup, { max: 3 });
    expect(wrapper.findAll('.t-avatar__collapse').length).toBe(1);
  });

  it('props.max works fine. `{".t-avatar__collapse > span":{"text":"+2"}}` should exist', () => {
    const wrapper = getAvatarGroupDefaultMount(AvatarGroup, { max: 3 });
    expect(wrapper.find('.t-avatar__collapse > span').text()).toBe('+2');
  });

  it('props.size is equal to small', () => {
    const wrapper = getAvatarGroupDefaultMount(AvatarGroup, { size: 'small' });
    const domWrapper = wrapper.find('.t-avatar');
    expect(domWrapper.classes('t-size-s')).toBeTruthy();
    const domWrapper1 = wrapper.find('.t-avatar:nth-child(5)');
    expect(domWrapper1.classes('t-size-l')).toBeTruthy();
  });
  it('props.size is equal to large', () => {
    const wrapper = getAvatarGroupDefaultMount(AvatarGroup, { size: 'large' });
    const domWrapper = wrapper.find('.t-avatar');
    expect(domWrapper.classes('t-size-l')).toBeTruthy();
    const domWrapper1 = wrapper.find('.t-avatar:nth-child(4)');
    expect(domWrapper1.classes('t-size-s')).toBeTruthy();
  });

  it('props.size is equal to 120px', () => {
    const wrapper = getAvatarGroupDefaultMount(AvatarGroup, { size: '120px' });
    const domWrapper = wrapper.find('.t-avatar');
    expect(domWrapper.element.style.width).toBe('120px');
    expect(domWrapper.element.style.height).toBe('120px');
    expect(domWrapper.element.style.fontSize).toBe('60px');
  });
});
