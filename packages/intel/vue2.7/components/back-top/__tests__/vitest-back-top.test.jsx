/* eslint-disable @typescript-eslint/no-unused-vars */
/**
 * 该文件由脚本自动生成，如需修改请联系 PMC
 * This file generated by scripts of tdesign-api. `npm run api:docs BackTop VueNext(PC) vitest,finalProject`
 * If you need to modify this file, contact PMC first please.
 */
import { mount } from '@vue/test-utils';
import { vi } from 'vitest';
import { BackTop } from '..';

describe('BackTop Component', () => {
  it('props.content works fine', () => {
    const wrapper = mount({
      render() {
        return <BackTop content={() => <span class="custom-node">TNode</span>}></BackTop>;
      },
    });
    expect(wrapper.find('.custom-node').exists()).toBeTruthy();
    expect(wrapper.element).toMatchSnapshot();
  });

  it('slots.content works fine', () => {
    const wrapper = mount({
      render() {
        return (
          <BackTop>
            <span class="custom-node">TNode</span>
          </BackTop>
        );
      },
    });
    expect(wrapper.find('.custom-node').exists()).toBeTruthy();
    expect(wrapper.element).toMatchSnapshot();
  });

  it('props.default works fine', () => {
    const wrapper = mount({
      render() {
        return <BackTop default={() => <span class="custom-node">TNode</span>}></BackTop>;
      },
    });
    expect(wrapper.find('.custom-node').exists()).toBeTruthy();
    expect(wrapper.element).toMatchSnapshot();
  });

  it('slots.default works fine', () => {
    const wrapper = mount({
      render() {
        return (
          <BackTop>
            <span class="custom-node">TNode</span>{' '}
          </BackTop>
        );
      },
    });
    expect(wrapper.find('.custom-node').exists()).toBeTruthy();
    expect(wrapper.element).toMatchSnapshot();
  });

  ['circle', 'square'].forEach((item) => {
    it(`props.shape is equal to ${item}`, () => {
      const wrapper = mount({
        render() {
          return <BackTop shape={item}></BackTop>;
        },
      });
      expect(wrapper.classes(`t-back-top--${item}`)).toBeTruthy();
      expect(wrapper.element).toMatchSnapshot();
    });
  });

  const sizeClassNameList = ['t-size-s', 't-size-m'];
  ['small', 'medium'].forEach((item, index) => {
    it(`props.size is equal to ${item}`, () => {
      const wrapper = mount({
        render() {
          return <BackTop size={item}>BackTop</BackTop>;
        },
      });
      expect(wrapper.classes(sizeClassNameList[index])).toBeTruthy();
      expect(wrapper.element).toMatchSnapshot();
    });
  });

  ['light', 'primary', 'dark'].forEach((item) => {
    it(`props.theme is equal to ${item}`, () => {
      const wrapper = mount({
        render() {
          return <BackTop theme={item}>Text</BackTop>;
        },
      });
      expect(wrapper.classes(`t-back-top--theme-${item}`)).toBeTruthy();
      expect(wrapper.element).toMatchSnapshot();
    });
  });
});
