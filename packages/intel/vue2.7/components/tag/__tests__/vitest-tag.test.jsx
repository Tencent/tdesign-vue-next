/* eslint-disable @typescript-eslint/no-unused-vars */
/**
 * 该文件由脚本自动生成，如需修改请联系 PMC
 * This file generated by scripts of tdesign-api. `npm run api:docs Tag Vue(PC) vitest,finalProject`
 * If you need to modify this file, contact PMC first please.
 */
import { mount } from '@vue/test-utils';
import { vi } from 'vitest';
import { Tag, CheckTag } from '..';

describe('Tag Component', () => {
  it('props.closable: Tag contains element `.t-tag__icon-close`', () => {
    // closable default value is false
    const wrapper = mount({
      render() {
        return <Tag></Tag>;
      },
    });
    expect(wrapper.find('.t-tag__icon-close').exists()).toBeFalsy();
    // closable = false
    const wrapper1 = mount({
      render() {
        return <Tag closable={false}></Tag>;
      },
    });
    expect(wrapper1.find('.t-tag__icon-close').exists()).toBeFalsy();
    // closable = true
    const wrapper2 = mount({
      render() {
        return <Tag closable={true}></Tag>;
      },
    });
    expect(wrapper2.find('.t-tag__icon-close').exists()).toBeTruthy();
  });

  it('props.content works fine', () => {
    const wrapper = mount({
      render() {
        return <Tag content={(h) => <span class="custom-node">TNode</span>}></Tag>;
      },
    });
    expect(wrapper.find('.custom-node').exists()).toBeTruthy();
  });

  it('slots.content works fine', () => {
    const wrapper = mount({
      render() {
        return <Tag scopedSlots={{ content: (h) => <span class="custom-node">TNode</span> }}></Tag>;
      },
    });
    expect(wrapper.find('.custom-node').exists()).toBeTruthy();
  });

  it('props.default works fine', () => {
    const wrapper = mount({
      render() {
        return <Tag default={(h) => <span class="custom-node">TNode</span>}></Tag>;
      },
    });
    expect(wrapper.find('.custom-node').exists()).toBeTruthy();
  });

  it('slots.default works fine', () => {
    const wrapper = mount({
      render() {
        return <Tag scopedSlots={{ default: (h) => <span class="custom-node">TNode</span> }}></Tag>;
      },
    });
    expect(wrapper.find('.custom-node').exists()).toBeTruthy();
  });

  it('props.disabled: hide closeIcon if tag is disabled, and not trigger click event', async () => {
    const onClickFn = vi.fn();
    const wrapper = mount({
      render() {
        return <Tag disabled={true} closable={true} on={{ click: onClickFn }}></Tag>;
      },
    });
    wrapper.findComponent(Tag).trigger('click');
    await wrapper.vm.$nextTick();
    expect(wrapper.find('.t-tag__icon-close').exists()).toBeFalsy();
    expect(onClickFn).not.toHaveBeenCalled();
  });

  it('props.icon works fine', () => {
    const wrapper = mount({
      render() {
        return <Tag icon={(h) => <span class="custom-node">TNode</span>}></Tag>;
      },
    });
    expect(wrapper.find('.custom-node').exists()).toBeTruthy();
  });

  it('slots.icon works fine', () => {
    const wrapper = mount({
      render() {
        return <Tag scopedSlots={{ icon: (h) => <span class="custom-node">TNode</span> }}></Tag>;
      },
    });
    expect(wrapper.find('.custom-node').exists()).toBeTruthy();
  });

  it('props.maxWidth is equal to 150px', () => {
    const wrapper = mount({
      render() {
        return <Tag maxWidth={'150px'} content={'This is a long long long long long tag'}></Tag>;
      },
    });
    const domWrapper1 = wrapper.find('.t-tag--text');
    expect(domWrapper1.element.style.maxWidth).toBe('150px');
    expect(domWrapper1.attributes('title')).toBe('This is a long long long long long tag');
  });

  const shapeClassNameList = [{ 't-tag--square': false }, 't-tag--round', 't-tag--mark'];
  ['square', 'round', 'mark'].forEach((item, index) => {
    it(`props.shape is equal to ${item}`, () => {
      const wrapper = mount({
        render() {
          return <Tag shape={item}></Tag>;
        },
      });
      if (typeof shapeClassNameList[index] === 'string') {
        expect(wrapper.classes(shapeClassNameList[index])).toBeTruthy();
      } else if (typeof shapeClassNameList[index] === 'object') {
        const classNameKey = Object.keys(shapeClassNameList[index])[0];
        expect(wrapper.classes(classNameKey)).toBeFalsy();
      }
    });
  });

  const sizeClassNameList = ['t-size-s', { 't-size-m': false }, 't-size-l'];
  ['small', 'medium', 'large'].forEach((item, index) => {
    it(`props.size is equal to ${item}`, () => {
      const wrapper = mount({
        render() {
          return <Tag size={item}></Tag>;
        },
      });
      if (typeof sizeClassNameList[index] === 'string') {
        expect(wrapper.classes(sizeClassNameList[index])).toBeTruthy();
      } else if (typeof sizeClassNameList[index] === 'object') {
        const classNameKey = Object.keys(sizeClassNameList[index])[0];
        expect(wrapper.classes(classNameKey)).toBeFalsy();
      }
    });
  });

  ['default', 'primary', 'warning', 'danger', 'success'].forEach((item) => {
    it(`props.theme is equal to ${item}`, () => {
      const wrapper = mount({
        render() {
          return <Tag theme={item}></Tag>;
        },
      });
      expect(wrapper.classes(`t-tag--${item}`)).toBeTruthy();
    });
  });

  ['dark', 'light', 'outline', 'light-outline'].forEach((item) => {
    it(`props.variant is equal to ${item}`, () => {
      const wrapper = mount({
        render() {
          return <Tag variant={item}></Tag>;
        },
      });
      expect(wrapper.classes(`t-tag--${item}`)).toBeTruthy();
    });
  });

  it('events.click works fine', async () => {
    const fn = vi.fn();
    const wrapper = mount({
      render() {
        return <Tag on={{ click: fn }}></Tag>;
      },
    });
    wrapper.findComponent(Tag).trigger('click');
    await wrapper.vm.$nextTick();
    expect(fn).toHaveBeenCalled();
    expect(fn.mock.calls[0][0].e.type).toBe('click');
  });

  it('events.close works fine', async () => {
    const onCloseFn = vi.fn();
    const wrapper = mount({
      render() {
        return <Tag closable={true} on={{ close: onCloseFn }}></Tag>;
      },
    });
    wrapper.find('.t-tag__icon-close').trigger('click');
    await wrapper.vm.$nextTick();
    expect(onCloseFn).toHaveBeenCalled();
    expect(onCloseFn.mock.calls[0][0].e.type).toBe('click');
  });
});

describe('CheckTag Component', () => {
  it('props.content works fine', () => {
    const wrapper = mount({
      render() {
        return <CheckTag content={(h) => <span class="custom-node">TNode</span>}></CheckTag>;
      },
    });
    expect(wrapper.find('.custom-node').exists()).toBeTruthy();
  });

  it('slots.content works fine', () => {
    const wrapper = mount({
      render() {
        return <CheckTag scopedSlots={{ content: (h) => <span class="custom-node">TNode</span> }}></CheckTag>;
      },
    });
    expect(wrapper.find('.custom-node').exists()).toBeTruthy();
  });

  it('props.default works fine', () => {
    const wrapper = mount({
      render() {
        return <CheckTag default={(h) => <span class="custom-node">TNode</span>}></CheckTag>;
      },
    });
    expect(wrapper.find('.custom-node').exists()).toBeTruthy();
  });

  it('slots.default works fine', () => {
    const wrapper = mount({
      render() {
        return <CheckTag scopedSlots={{ default: (h) => <span class="custom-node">TNode</span> }}></CheckTag>;
      },
    });
    expect(wrapper.find('.custom-node').exists()).toBeTruthy();
  });
});
