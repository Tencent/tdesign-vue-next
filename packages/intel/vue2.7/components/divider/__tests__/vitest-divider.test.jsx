/**
 * 该文件由脚本自动生成，如需修改请联系 PMC
 * This file generated by scripts of tdesign-api. `npm run api:docs Divider Vue(PC) vitest,finalProject`
 * If you need to modify this file, contact PMC first please.
 */
import { mount } from '@vue/test-utils';
import { Divider } from '..';

describe('Divider Component', () => {
  ['left', 'right', 'center'].forEach((item) => {
    it(`props.align is equal to ${item}`, () => {
      const wrapper = mount({
        render() {
          return <Divider align={item}>Text</Divider>;
        },
      });
      expect(wrapper.classes(`t-divider--with-text-${item}`)).toBeTruthy();
      expect(wrapper.element).toMatchSnapshot();
    });
  });

  it('props.content works fine', () => {
    const wrapper = mount({
      render() {
        return <Divider content={(h) => <span class="custom-node">TNode</span>}></Divider>;
      },
    });
    expect(wrapper.find('.custom-node').exists()).toBeTruthy();
    expect(wrapper.element).toMatchSnapshot();
  });

  it('slots.content works fine', () => {
    const wrapper = mount({
      render() {
        return <Divider scopedSlots={{ content: () => <span class="custom-node">TNode</span> }}></Divider>;
      },
    });
    expect(wrapper.find('.custom-node').exists()).toBeTruthy();
    expect(wrapper.element).toMatchSnapshot();
  });

  it('props.dashed works fine', () => {
    // dashed default value is false
    const wrapper1 = mount({
      render() {
        return <Divider></Divider>;
      },
    });
    expect(wrapper1.classes('t-divider--dashed')).toBeFalsy();
    // dashed = true
    const wrapper2 = mount({
      render() {
        return <Divider dashed={true}></Divider>;
      },
    });
    expect(wrapper2.classes('t-divider--dashed')).toBeTruthy();
    // dashed = false
    const wrapper3 = mount({
      render() {
        return <Divider dashed={false}></Divider>;
      },
    });
    expect(wrapper3.classes('t-divider--dashed')).toBeFalsy();
  });

  it('props.default works fine', () => {
    const wrapper = mount({
      render() {
        return <Divider default={(h) => <span class="custom-node">TNode</span>}></Divider>;
      },
    });
    expect(wrapper.find('.custom-node').exists()).toBeTruthy();
    expect(wrapper.element).toMatchSnapshot();
  });

  it('slots.default works fine', () => {
    const wrapper = mount({
      render() {
        return <Divider scopedSlots={{ default: () => <span class="custom-node">TNode</span> }}></Divider>;
      },
    });
    expect(wrapper.find('.custom-node').exists()).toBeTruthy();
    expect(wrapper.element).toMatchSnapshot();
  });

  ['horizontal', 'vertical'].forEach((item) => {
    it(`props.layout is equal to ${item}`, () => {
      const wrapper = mount({
        render() {
          return <Divider layout={item}></Divider>;
        },
      });
      expect(wrapper.classes(`t-divider--${item}`)).toBeTruthy();
      expect(wrapper.element).toMatchSnapshot();
    });
  });
});
